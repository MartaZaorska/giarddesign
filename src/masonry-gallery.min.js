const createMasonryGallery=(()=>{const n=document.createElement("template");n.innerHTML='\n    <style>\n      .container, .container * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n        border: 0;\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      .container {\n        --gap: 1em;\n        --imageBorder: none;\n        --items0: 1;\n        --items1: 2;\n        --items2: 3;\n        --items3: 4;\n        --items4: 5;\n        --items5: 6;\n        width: 100%;\n        height: auto;\n        column-count: var(--items0);\n        -moz-column-count: var(--items0);\n        -webkit-column-count: var(--items0);\n        column-gap: var(--gap);\n      }\n\n      .item {\n        margin: 0;\n        display: grid;\n        grid-template-rows: 1fr auto;\n        break-inside: avoid;\n        position: relative;\n        overflow: hidden;\n        border: var(--imageBorder);\n      }\n\n      .item:not(:last-child){\n        margin-bottom: var(--gap);\n      }\n\n      .item p {\n        position: absolute;\n        bottom: 0;\n        width: 100%;\n        height: fit-content;\n        background: rgba(40, 40, 40, 0.4);\n        backdrop-filter: blur(3px);\n        color: #fff;\n        padding: 0.7em;\n        font-size: 0.9em;\n        font-weight: bold;\n        line-height: 1.3;\n\n        transform: translateY(102%);\n        transition: all 0.1s ease;\n\n        display: none;\n      }\n\n      .item img {\n        grid-row: 1 / -1;\n        grid-column: 1;\n        max-width: 100%;\n        width: 100%;\n        display: block;\n        pointer-events: none;\n      }\n\n      .pointer .item {\n        cursor: pointer;\n      }\n\n      @media screen and (min-width: 576px){\n        .container {\n          column-count: var(--items1);\n          -moz-column-count: var(--items1);\n          -webkit-column-count: var(--items1);\n        }\n      }\n\n      @media screen and (min-width: 768px){\n        .container {\n          column-count: var(--items2);\n          -moz-column-count: var(--items2);\n          -webkit-column-count: var(--items2);\n        }\n      }\n\n      @media screen and (min-width: 992px){\n        .container {\n          column-count: var(--items3);\n          -moz-column-count: var(--items3);\n          -webkit-column-count: var(--items3);\n        }\n\n        .item p {\n          display: block;\n        }\n        \n        .item:hover p{\n          transform: translateY(0);\n        }\n      }\n\n      @media screen and (min-width: 1200px){\n        .container {\n          column-count: var(--items4);\n          -moz-column-count: var(--items4);\n          -webkit-column-count: var(--items4);\n        }\n      }\n\n      @media screen and (min-width: 1440px){\n        .container {\n          column-count: var(--items5);\n          -moz-column-count: var(--items5);\n          -webkit-column-count: var(--items5);\n        }\n      }\n    </style>\n\n    <div class="container"></div>\n  ';class t extends HTMLElement{constructor(t,e,o){super(),this.data=[],this.options={responsive:[1,2,3,4,5,6],imageBorder:"none",gap:"12px",displayTextOnHover:!1,cursorPointer:!1},this.onClickHandler=o,this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(n.content.cloneNode(!0)),this.update(t,e)}updateStyleProperty(){const n=this.shadowRoot.querySelector(".container");n.style.setProperty("--gap",this.options.gap),n.style.setProperty("--imageBorder",this.options.imageBorder),this.options.responsive.forEach(((t,e)=>n.style.setProperty(`--items${e}`,t<=0?e+1:t)))}getText(n){if("name"===this.options.displayTextOnHover&&n.hasOwnProperty("name"))return n.name;if(!n.hasOwnProperty("tags"))return"";if(!Array.isArray(n.tags)&&"string"!=typeof n.tags)return"";return(Array.isArray(n.tags)?n.tags:[n.tags]).reduce(((n,t)=>n+(""!==t?` #${t.toLowerCase().split(" ").join("")}`:"")),"")}create(){const n=this.shadowRoot.querySelector(".container");n.innerHTML="",this.data.forEach(((t,e)=>{const o=document.createElement("div");o.classList.add("item");const i=document.createElement("img");if(i.src=t.url,i.alt=t.name||"",o.appendChild(i),this.options.displayTextOnHover){const n=document.createElement("p"),e=this.getText(t);n.innerText=e,""!==e&&o.appendChild(n)}o.addEventListener("click",(()=>this.onClickHandler(t,e))),n.appendChild(o)})),this.options.cursorPointer&&n.classList.add("pointer")}update(n,t){n?.length>0&&(n.forEach((n=>{if("string"!=typeof n?.url)throw new Error('Invalid argument: each element in data should have the property "url" (path to the image).')})),this.data=n),this.options={...this.options,...t},this.updateStyleProperty(),this.create()}updateHandler=(n=[],t={})=>this.update(n,t)}return window.customElements.define("masonry-gallery",t),function(n,e=[],o={},i=((n,t)=>{})){const r="string"==typeof n?document.querySelector(n):n;if(Object.getPrototypeOf(r).toString().indexOf("HTML")<0)throw new Error('Invalid argument: "elementOrSelector" must be an HTML element or a selector to an existing HTML element.');const a=new t(e,o,i);return r.appendChild(a),{update:a.updateHandler}}})();